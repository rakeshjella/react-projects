The useOptimistic hook is a feature introduced in React to help developers implement optimistic UI updates. Optimistic updates allow you to update the UI immediately while assuming that an asynchronous operation (like a network request) will succeed. This improves the perceived performance of your app.

If the operation fails, the useOptimistic hook allows you to roll back the optimistic state to ensure the UI remains consistent.


const [optimisticState, applyOptimisticUpdate] = useOptimistic(initialState, reducer);



initialState: The initial state of your component.
reducer: A function that updates the state based on an action. It takes the current state and an action and returns the new state.

Key Concepts
Immediate Feedback: The UI updates immediately after an action is dispatched, even before the server response.
Rollback: If the server request fails, you can revert the UI to its original state.


Example: Like Button with Optimistic UI
Imagine a scenario where a user clicks a "Like" button, and the app updates the like count immediately while sending a network request.

import React from "react";
import { useOptimistic } from "react";

const LikeButton = () => {
  // Initial state and reducer function
  const [likes, setLikes] = useOptimistic(
    { count: 0 },
    (state, action) => {
      switch (action.type) {
        case "increment":
          return { count: state.count + 1 };
        case "rollback":
          return { count: action.payload }; // Roll back to previous state
        default:
          return state;
      }
    }
  );

  const handleLike = async () => {
    const previousCount = likes.count;

    // Optimistically update the like count
    setLikes({ type: "increment" });

    try {
      // Simulate a network request
      await fetch("/api/like", { method: "POST" });
    } catch (error) {
      console.error("Failed to update likes:", error);
      // Roll back the optimistic update
      setLikes({ type: "rollback", payload: previousCount });
    }
  };

  return (
    <div>
      <p>Likes: {likes.count}</p>
      <button onClick={handleLike}>Like</button>
    </div>
  );
};

export default LikeButton;




Example Explanation
Initial State: The useOptimistic hook starts with an initial likes count of 0.
Optimistic Update: When the "Like" button is clicked, the setLikes function immediately increments the count in the UI.
Network Request: The app sends a POST request to update the server.
Error Handling: If the request fails, the state rolls back to its previous value using the rollback action.


When to Use useOptimistic
For actions like "liking a post," "adding items to a cart," or "marking tasks as complete" where immediate feedback is critical.
In scenarios where the asynchronous operation has a high success rate, minimizing the need for rollbacks.



Example: Optimistic Todo List
Here, we'll build a todo list that supports adding and deleting tasks with optimistic UI updates. If the server request fails, we roll back to the previous state.

Implementation

import React, { useState } from "react";
import { useOptimistic } from "react";

const TodoApp = () => {
  // Initial state and reducer
  const [todos, updateTodos] = useOptimistic(
    [], // Initial state: an empty array of todos
    (state, action) => {
      switch (action.type) {
        case "add":
          return [...state, action.payload]; // Add a new todo
        case "delete":
          return state.filter((todo) => todo.id !== action.payload); // Remove the todo by ID
        case "rollbackAdd":
          return state.filter((todo) => todo.id !== action.payload); // Roll back added todo
        case "rollbackDelete":
          return [...state, action.payload]; // Roll back deleted todo
        default:
          return state;
      }
    }
  );

  const [inputValue, setInputValue] = useState("");

  const handleAddTodo = async () => {
    const newTodo = { id: Date.now(), text: inputValue };
    setInputValue("");

    // Optimistically add the todo
    updateTodos({ type: "add", payload: newTodo });

    try {
      // Simulate a network request
      await fetch("/api/addTodo", {
        method: "POST",
        body: JSON.stringify(newTodo),
        headers: { "Content-Type": "application/json" },
      });
    } catch (error) {
      console.error("Failed to add todo:", error);
      // Roll back optimistic update
      updateTodos({ type: "rollbackAdd", payload: newTodo.id });
    }
  };

  const handleDeleteTodo = async (id) => {
    const todoToDelete = todos.find((todo) => todo.id === id);

    // Optimistically delete the todo
    updateTodos({ type: "delete", payload: id });

    try {
      // Simulate a network request
      await fetch(`/api/deleteTodo/${id}`, { method: "DELETE" });
    } catch (error) {
      console.error("Failed to delete todo:", error);
      // Roll back optimistic update
      updateTodos({ type: "rollbackDelete", payload: todoToDelete });
    }
  };

  return (
    <div>
      <h1>Todo List</h1>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Add a new todo"
      />
      <button onClick={handleAddTodo}>Add Todo</button>

      <ul>
        {todos.map((todo) => (
          <li key={todo.id}>
            {todo.text}
            <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TodoApp;



Explanation of Complex State Management
Initial State:

The todos state is initialized as an empty array.
Reducer Function:

Handles multiple actions:
add: Adds a new todo to the state.
delete: Removes a todo by id.
rollbackAdd: Removes a previously added todo if the server request fails.
rollbackDelete: Re-adds a todo that was deleted if the server request fails.
Adding Todos:

When a new todo is added, it's immediately shown in the UI.
If the server request fails, the todo is removed from the UI using the rollbackAdd action.
Deleting Todos:

When a todo is deleted, itâ€™s immediately removed from the UI.
If the server request fails, the todo is restored using the rollbackDelete action.
Benefits of useOptimistic for Complex State
Scalable: Easily manage complex states like arrays or objects with multiple action types.
Customizable Rollbacks: Tailor rollback logic for each action type.
Seamless UI Experience: End users see immediate feedback, improving the app's responsiveness.